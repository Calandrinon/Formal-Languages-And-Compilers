math_operator relational_operator boolean_operator type list variable number mathematical_expression relational_operand relational_expression expression condition assignment input_output_statement simple_statement compound_statement statement if_statement loop_statement int str char double bool expression_to_compare
"+" "-" "*" "/" "%" "**" "==" "!=" "<" "<=" ">" ">=" "and" "or" "not" "deflist" "[]" ":" ";" "defvar" "," "=" "input" "(" ")" "print" "if" "{" "}" "else" "loop"

math_operator := "+" | "-" | "*" | "/" | "%" | "**"
relational_operator := "==" | "!=" | "<" | "<=" | ">" | ">="
boolean_operator := "and" | "or" | "not"
type := int | str | char | double | bool
list := "deflist" identifier "[]" ":" type ";"
variable := "defvar" identifier [ ":" type ] { "," identifier [ ":" type ] } ";"
number := int | double
mathematical_expression := number { math_operator number }
relational_operand := identifier | int | double | mathematical_expression
relational_expression := relational_operand relational_operator relational_operand
expression_to_compare := mathematical_expression | relational_expression
expression := expression_to_compare { boolean_operator expression }
condition := expression relation expression
assignment := identifier "=" expression ";"
input_output_statement := "input" "(" identifier { "," identifier } ")" ";" | "print" "(" identifier { "," identifier } ")" ";"
simple_statement := assignment | input_output_statement
compound_statement := simple_statement { ";" compound_statement }
statement := compound_statement | if_statement | loop_statement
if_statement := "if" condition "{" statement "}" [ "else" "{" statement "}" ]
loop_statement := "loop" expression "{" { statement } "}"